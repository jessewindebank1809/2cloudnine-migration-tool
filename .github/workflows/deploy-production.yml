name: Deploy to Production

on:
  pull_request:
    branches: [main]
    types: [closed]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    if: github.event.pull_request.merged == true
    permissions:
      contents: write
      deployments: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Try to download build artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: .
        continue-on-error: true

      - name: Setup Bun (if no artifacts)
        if: steps.download-artifacts.outcome == 'failure'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies (if no artifacts)
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          echo "üîÑ Installing dependencies with Bun..."
          bun install
          echo "‚úÖ Dependencies installed"

      - name: Generate Prisma client (if no artifacts)
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          echo "üîÑ Generating Prisma client..."
          bun prisma generate
          echo "‚úÖ Prisma client generated"

      - name: Build application (if no artifacts)
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          echo "üîÑ Building application..."
          bun run build
          echo "‚úÖ Application built"
        env:
          DATABASE_URL: postgresql://placeholder:placeholder@localhost:5432/placeholder
          JWT_SECRET: build-time-placeholder
          ENCRYPTION_KEY: build-time-placeholder-key-for-testing
          NEXT_PUBLIC_BASE_URL: https://tc9-migration-tool.fly.dev
          NEXT_PUBLIC_APP_URL: https://tc9-migration-tool.fly.dev

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment',
              production_environment: true,
              required_contexts: []
            });
            return deployment.data.id;

      - name: Deploy to Fly.io Production with Docker cache
        run: |
          echo "üõ´ Deploying to Fly.io production..."
          # Deploy and capture exit code, but don't fail immediately on API errors
          if flyctl deploy --app tc9-migration-tool --strategy=immediate --build-arg BUILDKIT_INLINE_CACHE=1; then
            echo "‚úÖ Deployment to Fly.io completed"
          else
            exit_code=$?
            echo "‚ö†Ô∏è Deploy command exited with code $exit_code"
            # Check if the app is actually running despite the error
            if flyctl status --app tc9-migration-tool >/dev/null 2>&1; then
              echo "‚úÖ App is running despite deploy exit code"
            else
              echo "‚ùå Deploy failed and app is not running"
              exit $exit_code
            fi
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          DOCKER_BUILDKIT: 1

      - name: Check deployment status
        id: check-status
        run: |
          echo "üîÑ Checking deployment status..."
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            # Get status without JSON first to see raw output
            echo "üìä Getting app status (attempt $attempt/$max_attempts)..."
            
            # Try to get machine status
            status_output=$(flyctl status --app tc9-migration-tool 2>&1)
            echo "$status_output"
            
            if echo "$status_output" | grep -E "running|stopped" | grep -v "replacing"; then
              # Check if deployment is complete (machines are either running or stopped)
              echo "‚úÖ Deployment complete - machines are ready"
              # Make a health check request to wake up the app
              echo "üè• Performing health check..."
              if curl -f -s -o /dev/null -w "%{http_code}" https://tc9-migration-tool.fly.dev/api/health; then
                echo "‚úÖ Health check passed"
              else
                echo "‚ö†Ô∏è Health check failed, but deployment succeeded"
              fi
              break
            else
              echo "‚è≥ Deployment in progress, waiting..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå App failed to start within timeout"
            echo "üìã Current app status:"
            flyctl status --app tc9-migration-tool || true
            echo "üìù Recent logs:"
            flyctl logs --app tc9-migration-tool --no-tail || true
            exit 1
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Run database migrations
        run: |
          echo "üóÑÔ∏è Running database migrations..."
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "üìä Migration attempt $attempt/$max_attempts..."
            
            if flyctl ssh console --app tc9-migration-tool -C "sh -c 'cd /app && node node_modules/prisma/build/index.js migrate deploy'"; then
              echo "‚úÖ Database migrations completed successfully"
              break
            else
              echo "‚ö†Ô∏è Migration failed, retrying in 10 seconds..."
              sleep 10
              attempt=$((attempt + 1))
              
              if [ $attempt -gt $max_attempts ]; then
                echo "‚ùå Migrations failed after $max_attempts attempts"
                echo "üîß You may need to run migrations manually:"
                echo "flyctl ssh console --app tc9-migration-tool -C 'npx prisma migrate deploy'"
                exit 1
              fi
            fi
          done
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Health check
        run: |
          echo "üîÑ Running health check..."
          
          for i in {1..5}; do
            if curl -f --max-time 10 --silent "https://tc9-migration-tool.fly.dev/api/health" >/dev/null 2>&1; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "‚è≥ Health check attempt $i/5 failed, retrying in 5s..."
              [ $i -lt 5 ] && sleep 5
            fi
          done

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              environment_url: 'https://tc9-migration-tool.fly.dev',
              description: 'Production deployment ' + ('${{ job.status }}' === 'success' ? 'completed' : 'failed')
            });

      - name: Create release tag
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const date = new Date();
            const version = `v${date.getFullYear()}.${String(date.getMonth() + 1).padStart(2, '0')}.${String(date.getDate()).padStart(2, '0')}-${String(date.getHours()).padStart(2, '0')}${String(date.getMinutes()).padStart(2, '0')}`;
            
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${version}`,
              sha: context.sha
            });
            
            console.log(`Created release tag: ${version}`);

      - name: Deployment summary
        if: success()
        run: |
          echo "üéâ Deployment Summary"
          echo "====================="
          echo "Environment: production"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Fly App: tc9-migration-tool"
          echo "URL: https://tc9-migration-tool.fly.dev"
          echo "Health Check: https://tc9-migration-tool.fly.dev/api/health"
          echo ""
          echo "‚úÖ Deployment to production completed successfully!"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed"
          echo "üîç Check logs and app status"
          echo "Manual check: flyctl status --app tc9-migration-tool"