name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://placeholder:placeholder@localhost:5432/placeholder
          JWT_SECRET: build-time-placeholder
          ENCRYPTION_KEY: build-time-placeholder-key-for-testing
          NEXT_PUBLIC_BASE_URL: https://tc9-migration-tool-staging.fly.dev
          NEXT_PUBLIC_APP_URL: https://tc9-migration-tool-staging.fly.dev

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create staging fly.toml
        run: |
          cp fly.toml fly.staging.toml
          sed -i 's/app = "tc9-migration-tool"/app = "tc9-migration-tool-staging"/' fly.staging.toml

      - name: Set staging secrets
        run: |
          flyctl secrets set \
            DATABASE_URL="postgres://tc9_migration_tool_staging:${{ secrets.STAGING_DB_PASSWORD }}@tc9-migration-tool-staging-db.flycast:5432/tc9_migration_tool_staging?sslmode=disable" \
            NODE_ENV="staging" \
            BETTER_AUTH_SECRET="${{ secrets.STAGING_BETTER_AUTH_SECRET }}" \
            BETTER_AUTH_URL="https://tc9-migration-tool-staging.fly.dev" \
            NEXT_PUBLIC_APP_URL="https://tc9-migration-tool-staging.fly.dev" \
            NEXT_PUBLIC_BASE_URL="https://tc9-migration-tool-staging.fly.dev" \
            SALESFORCE_PRODUCTION_CLIENT_ID="${{ secrets.SALESFORCE_PRODUCTION_CLIENT_ID }}" \
            SALESFORCE_PRODUCTION_CLIENT_SECRET="${{ secrets.SALESFORCE_PRODUCTION_CLIENT_SECRET }}" \
            SALESFORCE_SANDBOX_CLIENT_ID="${{ secrets.SALESFORCE_SANDBOX_CLIENT_ID }}" \
            SALESFORCE_SANDBOX_CLIENT_SECRET="${{ secrets.SALESFORCE_SANDBOX_CLIENT_SECRET }}" \
            ENCRYPTION_KEY="${{ secrets.STAGING_ENCRYPTION_KEY }}" \
            JWT_SECRET="${{ secrets.STAGING_JWT_SECRET }}" \
            SENTRY_DSN="${{ secrets.SENTRY_DSN }}" \
            NEXT_PUBLIC_SENTRY_DSN="${{ secrets.SENTRY_DSN }}" \
            --app tc9-migration-tool-staging
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to Fly.io Staging
        run: |
          flyctl deploy --config fly.staging.toml --app tc9-migration-tool-staging --strategy=immediate
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Ensure app is running
        run: |
          echo "üîÑ Ensuring staging app is running before migrations..."
          flyctl machine list --app tc9-migration-tool-staging --json | jq -r '.[] | select(.state=="stopped") | .id' | xargs -I {} flyctl machine start {} --app tc9-migration-tool-staging
          
          # Wait a bit for the scale command to take effect
          sleep 10
          
          # Wait for app to be ready
          max_attempts=15
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "‚è≥ Attempt $attempt/$max_attempts: Checking if app is ready..."
            
            # Get detailed status
            echo "üìä Current app status:"
            flyctl status --app tc9-migration-tool-staging || true
            
            if flyctl status --app tc9-migration-tool-staging | grep -q "started"; then
              echo "‚úÖ App is running"
              break
            else
              echo "‚è≥ App not ready yet, waiting 45 seconds..."
              sleep 45
            fi
            
            attempt=$((attempt + 1))
            
            if [ $attempt -gt $max_attempts ]; then
              echo "‚ùå App failed to start after $max_attempts attempts"
              echo "üìä Final app status:"
              flyctl status --app tc9-migration-tool-staging || true
              echo "üîç App logs:"
              flyctl logs --app tc9-migration-tool-staging || true
              exit 1
            fi
          done
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Run database migrations
        run: |
          echo "üîÑ Running database migrations..."
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "üìä Migration attempt $attempt/$max_attempts..."
            
            if flyctl ssh console --app tc9-migration-tool-staging -C "npx prisma migrate deploy"; then
              echo "‚úÖ Database migrations completed successfully"
              break
            else
              echo "‚ö†Ô∏è Migration failed, retrying in 15 seconds..."
              sleep 15
              attempt=$((attempt + 1))
              
              if [ $attempt -gt $max_attempts ]; then
                echo "‚ùå Migrations failed after $max_attempts attempts"
                echo "üîß You may need to run migrations manually:"
                echo "flyctl ssh console --app tc9-migration-tool-staging -C 'npx prisma migrate deploy'"
                exit 1
              fi
            fi
          done
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Health check
        run: |
          echo "üè• Performing health check..."
          sleep 30
          
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "üîç Health check attempt $attempt/$max_attempts..."
            
            if curl -f --max-time 30 https://tc9-migration-tool-staging.fly.dev/api/health; then
              echo "‚úÖ Health check passed"
              break
            else
              echo "‚ö†Ô∏è Health check failed, retrying in 15 seconds..."
              sleep 15
              attempt=$((attempt + 1))
              
              if [ $attempt -gt $max_attempts ]; then
                echo "‚ùå Health check failed after $max_attempts attempts"
                echo "‚ö†Ô∏è Deployment completed but app may not be responding correctly"
                break
              fi
            fi
          done

      - name: Cleanup
        if: always()
        run: |
          rm -f fly.staging.toml

      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Staging deployment successful: https://tc9-migration-tool-staging.fly.dev"
          echo "üß™ Ready for testing"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Staging deployment failed"
          echo "üîç Check logs for issues" 