name: Deploy to Staging

on:
  push:
    branches: [staging]
  workflow_dispatch:

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          echo "🔄 Installing dependencies..."
          npm ci
          echo "✅ Dependencies installed"

      - name: Generate Prisma client
        run: |
          echo "🔄 Generating Prisma client..."
          npx prisma generate
          echo "✅ Prisma client generated"

      - name: Type checking
        run: |
          echo "🔄 Type checking..."
          npm run type-check
          echo "✅ Type checking completed"

      - name: Linting
        run: |
          echo "🔄 Linting..."
          npm run lint
          echo "✅ Linting completed"

      - name: Build application
        run: |
          echo "🔄 Building application..."
          npm run build
          echo "✅ Application built"
        env:
          DATABASE_URL: postgresql://placeholder:placeholder@localhost:5432/placeholder
          JWT_SECRET: build-time-placeholder
          ENCRYPTION_KEY: build-time-placeholder-key-for-testing
          NEXT_PUBLIC_BASE_URL: https://tc9-migration-tool-staging.fly.dev
          NEXT_PUBLIC_APP_URL: https://tc9-migration-tool-staging.fly.dev

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create staging fly.toml
        run: |
          echo "🔄 Creating staging fly.toml..."
          cp fly.toml fly.staging.toml
          sed -i 's/app = "tc9-migration-tool"/app = "tc9-migration-tool-staging"/' fly.staging.toml
          echo "✅ Staging config created"

      - name: Deploy to Fly.io Staging
        run: |
          echo "🛫 Deploying to Fly.io staging..."
          flyctl deploy --config fly.staging.toml --app tc9-migration-tool-staging --strategy=immediate
          echo "✅ Deployment to Fly.io completed"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Wait for deployment to stabilise
        run: |
          echo "🔄 Waiting for deployment to stabilise..."
          sleep 30
          echo "✅ Stabilisation wait completed"

      - name: Ensure app is running before migrations
        run: |
          echo "🔄 Ensuring staging app is running before migrations..."
          flyctl machine list --app tc9-migration-tool-staging --json | jq -r '.[] | select(.state=="stopped") | .id' | xargs -I {} flyctl machine start {} --app tc9-migration-tool-staging || true
          
          sleep 10
          
          # Wait for app to be ready with detailed status checking
          max_attempts=15
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "⏳ Attempt $attempt/$max_attempts: Checking if app is ready..."
            
            if flyctl status --app tc9-migration-tool-staging | grep -q "started"; then
              echo "✅ App is running"
              break
            else
              echo "⏳ App not ready yet, waiting 45 seconds..."
              sleep 45
            fi
            
            attempt=$((attempt + 1))
            
            if [ $attempt -gt $max_attempts ]; then
              echo "❌ App failed to start after $max_attempts attempts"
              flyctl status --app tc9-migration-tool-staging || true
              flyctl logs --app tc9-migration-tool-staging || true
              exit 1
            fi
          done
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Run database migrations
        run: |
          echo "🗄️ Running database migrations..."
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "📊 Migration attempt $attempt/$max_attempts..."
            
            if flyctl ssh console --app tc9-migration-tool-staging -C "npx prisma migrate deploy"; then
              echo "✅ Database migrations completed successfully"
              break
            else
              echo "⚠️ Migration failed, retrying in 15 seconds..."
              sleep 15
              attempt=$((attempt + 1))
              
              if [ $attempt -gt $max_attempts ]; then
                echo "❌ Migrations failed after $max_attempts attempts"
                echo "🔧 You may need to run migrations manually:"
                echo "flyctl ssh console --app tc9-migration-tool-staging -C 'npx prisma migrate deploy'"
                exit 1
              fi
            fi
          done
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Health check
        run: |
          echo "🔄 Running health check at https://tc9-migration-tool-staging.fly.dev/api/health..."
          
          for i in {1..5}; do
            if curl -f --max-time 30 --silent "https://tc9-migration-tool-staging.fly.dev/api/health" >/dev/null 2>&1; then
              echo "✅ Health check passed"
              break
            else
              echo "⏳ Health check attempt $i/5 failed, retrying in 15s..."
              if [ $i -eq 5 ]; then
                echo "❌ Health check failed after 5 attempts"
                echo "⚠️ App may still be starting up. Check manually: https://tc9-migration-tool-staging.fly.dev/api/health"
              else
                sleep 15
              fi
            fi
          done

      - name: Cleanup
        if: always()
        run: |
          echo "🔄 Cleaning up..."
          rm -f fly.staging.toml
          echo "✅ Cleanup completed"

      - name: Deployment summary
        if: success()
        run: |
          echo "🎉 Deployment Summary"
          echo "====================="
          echo "Environment: staging"
          echo "Branch: ${{ github.ref_name }}"
          echo "Fly App: tc9-migration-tool-staging"
          echo "URL: https://tc9-migration-tool-staging.fly.dev"
          echo "Health Check: https://tc9-migration-tool-staging.fly.dev/api/health"
          echo ""
          echo "✅ Deployment to staging completed successfully!"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Staging deployment failed"
          echo "🔍 Check logs and app status"
          echo "Manual check: flyctl status --app tc9-migration-tool-staging" 