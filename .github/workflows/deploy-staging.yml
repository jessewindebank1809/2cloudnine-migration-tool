name: Deploy to Staging

on:
  push:
    branches: [staging]
  workflow_dispatch:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [staging]

env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    # Only run if CI passed or this is a direct push/manual trigger
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Try to download build artifacts
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: .
        continue-on-error: true

      - name: Setup Bun (if no artifacts)
        if: steps.download-artifacts.outcome == 'failure'
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies (if no artifacts)
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          echo "🔄 Installing dependencies with Bun..."
          bun install
          echo "✅ Dependencies installed"

      - name: Generate Prisma client (if no artifacts)
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          echo "🔄 Generating Prisma client..."
          bun prisma generate
          echo "✅ Prisma client generated"

      - name: Build application (if no artifacts)
        if: steps.download-artifacts.outcome == 'failure'
        run: |
          echo "🔄 Building application..."
          bun run build
          echo "✅ Application built"
        env:
          DATABASE_URL: postgresql://placeholder:placeholder@localhost:5432/placeholder
          JWT_SECRET: build-time-placeholder
          ENCRYPTION_KEY: build-time-placeholder-key-for-testing
          NEXT_PUBLIC_BASE_URL: https://tc9-migration-tool-staging.fly.dev
          NEXT_PUBLIC_APP_URL: https://tc9-migration-tool-staging.fly.dev

      - name: Setup Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Create staging fly.toml
        run: |
          echo "🔄 Creating staging fly.toml..."
          cp fly.toml fly.staging.toml
          sed -i 's/app = "tc9-migration-tool"/app = "tc9-migration-tool-staging"/' fly.staging.toml
          echo "✅ Staging config created"

      - name: Deploy to Fly.io Staging with Docker cache
        run: |
          echo "🛫 Deploying to Fly.io staging..."
          # Deploy and capture exit code, but don't fail immediately on API errors
          if flyctl deploy --config fly.staging.toml --app tc9-migration-tool-staging --strategy=immediate --build-arg BUILDKIT_INLINE_CACHE=1; then
            echo "✅ Deployment to Fly.io completed"
          else
            exit_code=$?
            echo "⚠️ Deploy command exited with code $exit_code"
            # Check if the app is actually running despite the error
            if flyctl status --app tc9-migration-tool-staging >/dev/null 2>&1; then
              echo "✅ App is running despite deploy exit code"
            else
              echo "❌ Deploy failed and app is not running"
              exit $exit_code
            fi
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          DOCKER_BUILDKIT: 1

      - name: Check deployment status
        id: check-status
        run: |
          echo "🔄 Checking deployment status..."
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            # Get status without JSON first to see raw output
            echo "📊 Getting app status (attempt $attempt/$max_attempts)..."
            
            # Try to get machine status
            status_output=$(flyctl status --app tc9-migration-tool-staging 2>&1)
            echo "$status_output"
            
            if echo "$status_output" | grep -E "running|stopped" | grep -v "replacing"; then
              # Check if deployment is complete (machines are either running or stopped)
              echo "✅ Deployment complete - machines are ready"
              # Make a health check request to wake up the app
              echo "🏥 Performing health check..."
              if curl -f -s -o /dev/null -w "%{http_code}" https://tc9-migration-tool-staging.fly.dev/api/health; then
                echo "✅ Health check passed"
              else
                echo "⚠️ Health check failed, but deployment succeeded"
              fi
              break
            else
              echo "⏳ Deployment in progress, waiting..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ App failed to start within timeout"
            echo "📋 Current app status:"
            flyctl status --app tc9-migration-tool-staging || true
            echo "📝 Recent logs:"
            flyctl logs --app tc9-migration-tool-staging --no-tail || true
            exit 1
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Run database migrations
        run: |
          echo "🗄️ Running database migrations..."
          max_attempts=3
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "📊 Migration attempt $attempt/$max_attempts..."
            
            if flyctl ssh console --app tc9-migration-tool-staging -C "cd /app && npx prisma migrate deploy"; then
              echo "✅ Database migrations completed successfully"
              break
            else
              echo "⚠️ Migration failed, retrying in 10 seconds..."
              sleep 10
              attempt=$((attempt + 1))
              
              if [ $attempt -gt $max_attempts ]; then
                echo "❌ Migrations failed after $max_attempts attempts"
                echo "🔧 You may need to run migrations manually:"
                echo "flyctl ssh console --app tc9-migration-tool-staging -C 'npx prisma migrate deploy'"
                exit 1
              fi
            fi
          done
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Health check
        run: |
          echo "🔄 Running health check..."
          
          for i in {1..5}; do
            if curl -f --max-time 10 --silent "https://tc9-migration-tool-staging.fly.dev/api/health" >/dev/null 2>&1; then
              echo "✅ Health check passed"
              break
            else
              echo "⏳ Health check attempt $i/5 failed, retrying in 5s..."
              [ $i -lt 5 ] && sleep 5
            fi
          done

      - name: Cleanup
        if: always()
        run: |
          echo "🔄 Cleaning up..."
          rm -f fly.staging.toml
          echo "✅ Cleanup completed"

      - name: Deployment summary
        if: success()
        run: |
          echo "🎉 Deployment Summary"
          echo "====================="
          echo "Environment: staging"
          echo "Branch: ${{ github.ref_name }}"
          echo "Fly App: tc9-migration-tool-staging"
          echo "URL: https://tc9-migration-tool-staging.fly.dev"
          echo "Health Check: https://tc9-migration-tool-staging.fly.dev/api/health"
          echo ""
          echo "✅ Deployment to staging completed successfully!"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Staging deployment failed"
          echo "🔍 Check logs and app status"
          echo "Manual check: flyctl status --app tc9-migration-tool-staging"