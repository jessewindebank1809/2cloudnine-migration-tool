generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                String   @id
  userId            String
  accountId         String
  providerId        String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model session {
  id           String   @id
  userId       String
  sessionToken String   @unique
  expires      DateTime
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String               @id
  name                  String?
  email                 String?              @unique
  emailVerified         Boolean?
  image                 String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  salesforceOrgId       String?
  salesforceInstanceUrl String?
  accounts              account[]
  sessions              session[]
  migration_projects    migration_projects[]
  organisations         organisations[]
}

model verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
}

model migration_projects {
  id                                                            String                      @id
  name                                                          String
  description                                                   String?
  source_org_id                                                 String
  target_org_id                                                 String
  status                                                        migration_status            @default(DRAFT)
  config                                                        Json                        @default("{}")
  created_at                                                    DateTime                    @default(now())
  updated_at                                                    DateTime
  user_id                                                       String
  organisations_migration_projects_source_org_idToorganisations organisations               @relation("migration_projects_source_org_idToorganisations", fields: [source_org_id], references: [id])
  organisations_migration_projects_target_org_idToorganisations organisations               @relation("migration_projects_target_org_idToorganisations", fields: [target_org_id], references: [id])
  User                                                          User                        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  migration_sessions                                            migration_sessions[]
  migration_template_usage                                      migration_template_usage[]
  migration_record_selections                                   migration_record_selections[]
  scheduled_migrations                                          scheduled_migrations[]
}

model migration_records {
  id                 String             @id
  session_id         String
  source_record_id   String?
  target_record_id   String?
  object_type        String
  status             record_status
  error_message      String?
  record_data        Json
  created_at         DateTime           @default(now())
  migration_sessions migration_sessions @relation(fields: [session_id], references: [id], onDelete: Cascade)
}

model migration_sessions {
  id                 String              @id
  project_id         String
  object_type        String
  status             session_status      @default(PENDING)
  total_records      Int                 @default(0)
  processed_records  Int                 @default(0)
  successful_records Int                 @default(0)
  failed_records     Int                 @default(0)
  error_log          Json                @default("[]")
  started_at         DateTime?
  completed_at       DateTime?
  created_at         DateTime            @default(now())
  migration_records  migration_records[]
  migration_projects migration_projects  @relation(fields: [project_id], references: [id], onDelete: Cascade)
}

model object_definitions {
  id                  String   @id
  name                String
  api_name            String
  description         String?
  is_standard         Boolean  @default(false)
  field_mappings      Json     @default("{}")
  relationship_config Json     @default("{}")
  validation_rules    Json     @default("{}")
  created_at          DateTime @default(now())
}

model organisations {
  id                                                                 String               @id
  name                                                               String
  org_type                                                           org_type
  salesforce_org_id                                                  String?
  instance_url                                                       String
  access_token_encrypted                                             String?
  refresh_token_encrypted                                            String?
  token_expires_at                                                   DateTime?
  user_id                                                            String
  created_at                                                         DateTime             @default(now())
  updated_at                                                         DateTime
  migration_projects_migration_projects_source_org_idToorganisations migration_projects[] @relation("migration_projects_source_org_idToorganisations")
  migration_projects_migration_projects_target_org_idToorganisations migration_projects[] @relation("migration_projects_target_org_idToorganisations")
  User                                                               User                 @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([salesforce_org_id, user_id])
}

model migration_templates {
  id                      String                    @id
  name                    String                    @db.VarChar(255)
  description             String?
  category                String                    @db.VarChar(50)
  version                 String                    @db.VarChar(20)
  is_active               Boolean                   @default(true)
  template_config         Json
  created_at              DateTime                  @default(now())
  updated_at              DateTime                  @updatedAt
  migration_template_usage migration_template_usage[]

  @@index([category])
  @@index([is_active])
}

model migration_template_usage {
  id                 String              @id
  template_id        String
  project_id         String
  selected_records   Json                @default("[]")
  validation_results Json                @default("{}")
  execution_config   Json                @default("{}")
  created_at         DateTime            @default(now())
  migration_templates migration_templates @relation(fields: [template_id], references: [id])
  migration_projects migration_projects  @relation(fields: [project_id], references: [id])

  @@index([template_id])
  @@index([project_id])
}

model migration_record_selections {
  id                 String             @id
  project_id         String
  object_type        String             @db.VarChar(255)
  source_record_id   String             @db.VarChar(18)
  is_selected        Boolean            @default(true)
  selection_criteria Json               @default("{}")
  created_at         DateTime           @default(now())
  migration_projects migration_projects @relation(fields: [project_id], references: [id])

  @@unique([project_id, source_record_id])
  @@index([project_id])
  @@index([object_type])
}

model scheduled_migrations {
  id                 String             @id
  name               String             @db.VarChar(255)
  description        String?
  project_id         String
  cron_expression    String             @db.VarChar(100)
  timezone           String             @db.VarChar(50) @default("UTC")
  is_active          Boolean            @default(true)
  status             scheduled_status   @default(ACTIVE)
  next_run_at        DateTime?
  last_run_at        DateTime?
  last_run_status    String?            @db.VarChar(50)
  total_runs         Int                @default(0)
  successful_runs    Int                @default(0)
  failed_runs        Int                @default(0)
  execution_config   Json               @default("{}")
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  migration_projects migration_projects @relation(fields: [project_id], references: [id])

  @@index([project_id])
  @@index([status])
  @@index([next_run_at])
}

enum migration_status {
  DRAFT
  READY
  RUNNING
  COMPLETED
  FAILED
}

enum org_type {
  PRODUCTION
  SANDBOX
  SCRATCH
}

enum record_status {
  SUCCESS
  FAILED
  SKIPPED
}

enum session_status {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum scheduled_status {
  ACTIVE
  PAUSED
  DISABLED
  ERROR
}
